package fr.unice.polytech.si3.qgl.iaac.ground;

import fr.unice.polytech.si3.qgl.iaac.contracts.Contract;
import fr.unice.polytech.si3.qgl.iaac.contracts.Contracts;
import fr.unice.polytech.si3.qgl.iaac.ReadJSON;
import fr.unice.polytech.si3.qgl.iaac.carte.Carte;
import fr.unice.polytech.si3.qgl.iaac.contracts.PrimaryContract;
import fr.unice.polytech.si3.qgl.iaac.resources.EnumPrimaryResources;
import fr.unice.polytech.si3.qgl.iaac.resources.EnumResources;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import java.awt.*;
import java.util.*;

import static fr.unice.polytech.si3.qgl.iaac.resources.EnumPrimaryResources.WOOD;
import static junit.framework.TestCase.assertTrue;
import static org.junit.Assert.assertEquals;

/**
 * Created by florian on 26/02/2017.
 */
public class ExploitTest {

    private ReadJSON json;
    private Men men;
    private Contracts contracts;
    private Carte map;
    private State exploit;
    private java.util.List<EnumResources> resources;

    @Before
    public void init(){
        resources = new ArrayList<>();
        resources.add(WOOD);
        exploit = new Exploit(resources);
        json=new ReadJSON("{\"men\": 12,\"budget\": 10000,\"contracts\": [{ \"amount\": 600, \"resource\": \"WOOD\" },{ \"amount\": 200, \"resource\": \"GLASS\" }],\"heading\": \"S\"}");
        men=new Men(new Point(0,0));
        contracts=new Contracts();
        contracts.add(new PrimaryContract(WOOD,500));
        map=new Carte(json);
    }

    @Test
    public void executeTest(){
        assertEquals(exploit.execute(men,contracts,map),"{ \"action\": \"exploit\", \"parameters\": { \"resource\": \"WOOD\" }}");
    }

   // @Ignore
    @Test
    public void waitTest(){
        exploit.execute(men,contracts,map);
        json.read("{ \"cost\": 3, \"extras\": {\"amount\": 9}, \"status\": \"OK\" }");
        assertTrue(exploit.wait(json) instanceof DefineWay);
    }

    @Test
    public void waitTestWithContractCompleted(){
        exploit.execute(men,contracts,map);
        json.read("{ \"cost\": 3, \"extras\": {\"amount\": 600}, \"status\": \"OK\" }");
        assertTrue(exploit.wait(json) instanceof DefineWaySecond);
    }

}
