package fr.unice.polytech.si3.qgl.iaac.ground;

import fr.unice.polytech.si3.qgl.iaac.contracts.Contracts;
import fr.unice.polytech.si3.qgl.iaac.json.ReadJSON;
import fr.unice.polytech.si3.qgl.iaac.map.Carte;
import fr.unice.polytech.si3.qgl.iaac.contracts.SecondaryContract;
import fr.unice.polytech.si3.qgl.iaac.resources.EnumManufacturedResources;
import org.junit.Before;
import org.junit.Test;

import java.awt.*;

import static junit.framework.TestCase.assertTrue;
import static org.junit.Assert.assertEquals;

/**
 * Created by sebde on 26/02/2017.
 */
public class ExploitSecondTest {
    private ReadJSON json;
    private Men men;
    private Contracts contracts;
    private Carte map;

    @Before
    public void init(){
        json=new ReadJSON("{\"men\": 12,\"budget\": 10000,\"contracts\": [{ \"amount\": 600, \"resource\": \"WOOD\" },{ \"amount\": 200, \"resource\": \"GLASS\" }],\"heading\": \"S\"}");
        men=new Men(new Point(0,0));
        contracts=new Contracts();
        map=new Carte(json);
    }

    @Test
    public void executeTestExploitFirstRessource(){
        contracts.add(new SecondaryContract(EnumManufacturedResources.RUM,5));
        State state=new ExploitSecond(0);
        assertEquals(state.execute(men,contracts,map),"{ \"action\": \"exploit\", \"parameters\": { \"resource\": \"SUGAR_CANE\" }}");
    }

    @Test
    public void executeTestExploitSecondRessource(){
        contracts.add(new SecondaryContract(EnumManufacturedResources.GLASS,5));
        State state=new ExploitSecond(1);
        assertEquals(state.execute(men,contracts,map),"{ \"action\": \"exploit\", \"parameters\": { \"resource\": \"WOOD\" }}");
    }


    @Test
    public void waitTestWithManufacturedRessouceNeededOneRessourceWichIsComplete(){
        contracts.add(new SecondaryContract(EnumManufacturedResources.LEATHER,5));
        State state=new ExploitSecond(0);
        state.execute(men,contracts,map);
        json.read("{ \"cost\": 3, \"extras\": {\"amount\": 17}, \"status\": \"OK\" }");
        assertTrue(state.wait(json) instanceof TransformSecond);
    }
    @Test
    public void waitTestWithManufacturedRessouceNeededOneRessourceWichIsNOTComplete(){
        contracts.add(new SecondaryContract(EnumManufacturedResources.PLANK,100));
        State state=new ExploitSecond(0);
        state.execute(men,contracts,map);
        json.read("{ \"cost\": 20, \"extras\": {\"amount\": 20}, \"status\": \"OK\" }");
        assertTrue(state.wait(json) instanceof DefineWaySecond);
    }




    @Test
    public void waitTestWithManufacturedRessourceNeededTwoRessourcesWichFirstIsComplete(){
        contracts.add(new SecondaryContract(EnumManufacturedResources.GLASS,5));
        State state=new ExploitSecond(0);
        state.execute(men,contracts,map);
        json.read("{ \"cost\": 50, \"extras\": {\"amount\": 60}, \"status\": \"OK\" }");
        assertTrue(state.wait(json) instanceof DefineWaySecond);
    }
    @Test
    public void waitTestWithManufacturedRessourceNeededTwoRessourcesWichFirstIsNOTComplete(){
        contracts.add(new SecondaryContract(EnumManufacturedResources.RUM,5));
        State state=new ExploitSecond(0);
        state.execute(men,contracts,map);
        json.read("{ \"cost\": 50, \"extras\": {\"amount\": 50}, \"status\": \"OK\" }");
        assertTrue(state.wait(json) instanceof DefineWaySecond);
    }


    @Test
    public void waitTestWithManufacturedRessourceNeededTwoRessourcesWichSecondIsComplete(){
        contracts.add(new SecondaryContract(EnumManufacturedResources.GLASS,5));
        State state=new ExploitSecond(1);
        state.execute(men,contracts,map);
        json.read("{ \"cost\": 50, \"extras\": {\"amount\": 30}, \"status\": \"OK\" }");
        assertTrue(state.wait(json) instanceof TransformSecond);
    }
    @Test
    public void waitTestWithManufacturedRessourceNeededTwoRessourcesWichSecondIsNOTComplete(){
        contracts.add(new SecondaryContract(EnumManufacturedResources.RUM,5));
        State state=new ExploitSecond(1);
        state.execute(men,contracts,map);
        json.read("{ \"cost\": 50, \"extras\": {\"amount\": 4}, \"status\": \"OK\" }");
        assertTrue(state.wait(json) instanceof DefineWaySecond);
    }


}
